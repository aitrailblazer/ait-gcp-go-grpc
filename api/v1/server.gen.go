// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/aitrailblazer/ait-gcp-go-grpc/api/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v1/echo)
	AitrailblazerServiceEcho(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AitrailblazerServiceEcho converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceEcho(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceEcho(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/echo", wrapper.AitrailblazerServiceEcho)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVwY7bNhD9lQHbQwO4kpO9+VR3swiMoqixu5diYSAUOZImpTgqOfLCWfjfC1JybcdO",
	"s4fmZHokznvz5s3oRRnuevboJarFi4qmxU7n4wfmxuE6sHA11Eu/S0FtLQmx124duMcghFEtJAw4Uxaj",
	"CdSnx2qhbtmLJh9Be9ChIgk67CBiIO3oM1roMEbdIGjHvoFnkhY0/CK7HkFaLTCmqzCCtAg5znU+XyYp",
	"1Ez1J4ReVE6UDuesHl+VaryrogTyjdrv/41w9QmNqP1MPYiWIV4H+Dg+/DgiWazJYwQNjhsy2gGGwAE6",
	"tujGUilCHEh05RBqDmCprjGgF+gDN0F3HfkG0G8psO9Sr2ZA3rjBpvj93cMjLNerJLWF+/Vt/lPAKice",
	"IlqodvDU3K9vNz+1In1clGVD0g5VYbgrm9CbNwXcadMeqR+6Yw5tlDYgQk9oMCb1rBa9mEoxbHF2KGu8",
	"OMtkxpBF0eRiAX/yAEZ7qMlb4EGg44Cgq3SUluKZMul+y88gDM8c/hodQgLkc+eelusVvMdIjYcPA1k8",
	"1mYcD7Zosn9zhbqnWNr8bpkh4ptLx6QirvczZk2mKp9bMi3ElgdnocJkb/RDB1vthmyrpwk49Ka4ZYub",
	"i0DCrjl0WtRCkZebd0fPkRdsMCSLTbJdclqCoygJaxI7jjYyOoRdFucL3eGxxYDJDRoMdx17iHiaIDs1",
	"Zu9lIwkn3ySeJNhlCj8GrNVC/VAeF0Y5bYvyclUcR0aHoPP/CepaORa36FIvfq61yVY/t9KXmpOHO984",
	"im0BS79LXK9fPbnj2EyDnowV03AdnHTSn9H+xaTc5j8eQU3o7Aw4nKSuRvmNI/Ty6k2Snv1+VOfcltlX",
	"6fDNVClEvubrJm4CoiSBIoYtmWkv5WWeiZK4lGyZFjW5yunPGB6mV5frlZqpLYY45psX8+Jt4s49et2T",
	"WqibYl7cpJnS0mbe5fZtiabNbHqOkn5TXTohruxXoO7SjZkK+PeAUX5luxtH0wv6nEL3vSOTk5SfYmJz",
	"+Gh9y6TnOme1EgwFtOMXLAdizz6Oyr+bz78n+HmL/vhtHPlaD07+R9j8lbqC935EmsblUPdoK91EtXi6",
	"2h+12Z+88qK87r7mGrXf7P8JAAD//8744KVfCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
