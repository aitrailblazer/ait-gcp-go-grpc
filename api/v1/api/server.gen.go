// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/aitrailblazer/ait-gcp-go-grpc/api/v1/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/ping)
	AitrailblazerServiceSend(ctx echo.Context, params AitrailblazerServiceSendParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AitrailblazerServiceSend converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceSend(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceSendParams
	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceSend(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/ping", wrapper.AitrailblazerServiceSend)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVT2/buBP9KgP+foctoEppc/NpjTQogj3USHJZBAY6IkfSdClSS46cdQN/9wUpubZj",
	"7zaHPZnmnzdv3rwZvSjt+8E7chLV4kVF3VGPefnZ+9bSKnjx9dgs3TZtojEs7B3aVfADBWGKaiFhpEIZ",
	"ijrwkI7VQt14J8guAjrAULMEDFuIFBgtfycDPcWILQFa71p4ZukA4VfZDgTSocAEV1ME6Qjyvm/y+hyk",
	"VIUajgi9qAyUFqesHt8ENb1VUQK7Vu12P3Z8/Y20qF2hVt61Cf40KjtDf6VF40OPohaKnVx/PECyE2op",
	"JIQ5Xrr9Kl6hAmniDZkv7gTMoNB74Z7exvGe4uBdpHOew8z+/4EatVD/qw4uqGYLVDnDi7gPgjLGy+J+",
	"nQ6/TiobathRBATrW9ZogULwAXpvyE5l5ghxZMHaEjQ+gOGmoUBOYAi+Ddj37Fogt+HgXZ8YFsBO29Gk",
	"/fvbh0dYru6SzQzcr27ynxLuMvAYyUC9haf2fnWz/qUTGeKiqlqWbqxL7fuqDYN+V8It6u5Afe9Mvbew",
	"dIEIBiZNMTnHoOBiTkV7Q8U+relhkclMW4YE2cYSfvcjaHTQsDPgR4HeBwKs01I6jifKpPedfwbx8OzD",
	"H1N3sAC77Nqn5eoOPlHk1sHnkQ0dctPWj6Zsc+/mDHHgWJl8t8oh4rvzbklJXK5nzJrMWT53rDuInR+t",
	"gZpSa5Mbe9igHXNLPc2Bw6DLG29ofbaRYr+hOWbZzjktwXKUFGsWO0420hjCNovzSnd47ChQcgOC9n3v",
	"HUQ6BshOjdl72Ujik28STxbq48/a5HxMHloGQ8Dtq15/nY6hDdlUi/cN6mz1Uyu91pwd3LrWcuxKWLpt",
	"4nr56dEb6/U85JKxYmquvZOO6jPZv5yVW//LETRM1hTgwxF0PcmvLZOTN03RtMWu8XkEsth0tkwfCra1",
	"xe8UHihsWFOqiyrUhkKcVLsqr8oPSVc/kMOB1UJdl1fldfI1SpdrVm0+VANPY64lST9JZUzC35l/iPRA",
	"zmSQgD0JhagWT2mqq4X6c6SwVYVy2Cee+4oW8yfzwhjfrdMgn0ZwpvTx6mpqNifkMiMcBss6c6q+Re8O",
	"n+Cf2e7HbM8qnprqy29TCzU4WvnPIs5T/0K8T1Ok2X7hwKxQgm3S8KLYar07uvKyV/bi1d1693cAAAD/",
	"/8tXzOOrCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
