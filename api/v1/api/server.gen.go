// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/aitrailblazer/ait-gcp-go-grpc/api/v1/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /echo/{message})
	AitrailblazerServiceEcho(ctx echo.Context, message string, params AitrailblazerServiceEchoParams) error

	// (GET /v1/ping)
	AitrailblazerServiceSendPing(ctx echo.Context, params AitrailblazerServiceSendPingParams) error

	// (GET /v1/shelves/{shelf})
	AitrailblazerServiceGetShelf(ctx echo.Context, shelf int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AitrailblazerServiceEcho converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceEcho(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "message" -------------
	var message string

	err = runtime.BindStyledParameterWithLocation("simple", false, "message", runtime.ParamLocationPath, ctx.Param("message"), &message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceEchoParams
	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, false, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceEcho(ctx, message, params)
	return err
}

// AitrailblazerServiceSendPing converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceSendPing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceSendPingParams
	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceSendPing(ctx, params)
	return err
}

// AitrailblazerServiceGetShelf converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceGetShelf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shelf" -------------
	var shelf int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "shelf", runtime.ParamLocationPath, ctx.Param("shelf"), &shelf)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shelf: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceGetShelf(ctx, shelf)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/echo/:message", wrapper.AitrailblazerServiceEcho)
	router.GET(baseURL+"/v1/ping", wrapper.AitrailblazerServiceSendPing)
	router.GET(baseURL+"/v1/shelves/:shelf", wrapper.AitrailblazerServiceGetShelf)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xW3W/bNhD/Vw7cHpLCldJ22IOHYs3SIAiGoUbSlyEJVpo8SddKpEKenLmG//fhKLmO",
	"P9L6YcOwPVkmeV+/+93HQhnftN6h46jGCxVNhY1On+em8r9hjLpE+dsG32JgwnQ503WXjnneohqryIFc",
	"qZbL0erETz+iYbUcqQvvyxonwbOfdsWpm4uctpaYvNP15JFiDh2OlMVoArVyrcbqzDvW5CJoBzpMiYMO",
	"c4gYSNf0GS00vZOga+9KeCCuQMMbcQO40gy9uilG4Aohnfsife8qydRoK9I3fTyLLa/eH6TqAHQm5Mor",
	"jK13cQ/OrXel/H4fsFBj9V2+Tlc+5Cqf+Cd1D9KbOslZ/FM+Ch8azWqsyPGrl2t3yTGWGERDsybAViwj",
	"FdAgzdC+cxvKrGZ8ztTgbvwjNcNwIGuuK6yLXdxPIcoFBIy+C2ZPwsjuk+oc3Xc4CJMVscfh//jD3vC5",
	"wgb3qUsXX3KflB4VZOR+BK1HDvMRIJvjA1lwzZq7uJ9mH/rLDz3fLBbkMIKG2pdkdA0Ygg/QeIt1T3iK",
	"EDtiPa0RCh/AUlFgQMfQBl8G3TTkSkA3o+BdI1waATlTd1bOr86v38Pp5FIKzsLV5Cz9yeAyKe4iWpjO",
	"4aa8mpzdHVXMbRzneUlcddPM+CYvQ2uOMzjXplq7vqpRsypmrgIitIQGo+BoNevxEIrxFkersHrBUXKm",
	"P7LImuqYwe++A6MdFOQs+I6h8QFBT+WTK4obyIh85R+APTz48KnvE8RALuXw5nRyCW8xUungoiOL69hM",
	"7TublamLpQh1SzG36W2eTMTjXRpKEPvzGRMmQ5QPFZkKYuW72sIUpcmh6xpIDVaAuRkMh9ZkZ97i3c7B",
	"NpefKOUBtn1srimy2BrAjj2NjA5hnsDZwh3eVxhQ2KDB+KbxDiI+VpCYGhP3EpHYC2/ET2Js4rca2u7A",
	"WJeMDkHPtzrTdjgWZ1hLLp4X2iSqb1JpG3NycO7KmmKVwambi6/7RR/J1N4M7V6IFaW4Vkx6lJ+e/tmA",
	"3N1XrqAgrO0IfHiketrDb2pCxwd1EjkiV/jUZIlruTuVkUn1tNafMVxjmJFByYtK7Tj2qJ1kJ9kLwdW3",
	"6HRLaqxeZSfZK+G15irlLEdT+XwxgLGUoxJZfgRsLfhf2icMyjaRdAXdIGOIanwjo0iNk341Uk5Lq/2S",
	"V5kv9x0FtKu1oKfH3vExaLrvMMzXqvol5WuCd2Kln70pwpcnJ33tOkaXItNtW5NJseUfo3frJelbLH68",
	"P6W8bNL03a99URa6q/lvMzrMkT323vaWBkKvou45pEtJx968qTt5kc9e5C31y8SQ8k3tqwfC39RZfdtv",
	"d+vtLEJKD6ye/jzcvGaMrEYHcOganZV16QkebWV/TaR/J/8bi93/gQCy5sww5ou07yyf5EJoDVwg/+L9",
	"p6Ph9wrvO4x8DAG5Cy7CkZwew+LWAQxcgaOhO+qWMpm9x/B6eABQIo/hNrmxkPy+brupNGwMMX+WT73/",
	"FPNny1uVni9/ekptg1x5+4dMbs1dQDFxmwhzq0RoKYJXg48aYouGCjKQDLBsFyn27CC6XiD3S+wOXXd3",
	"gsu3m8vkar2V0RmQA+Gsn5+7DTMONp5ul99cdP/ROugx+G8XwPrJYgX73qfLu+VfAQAA///lpM8kUg8A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
