// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/aitrailblazer/ait-gcp-go-grpc/api/v1/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/ping)
	AitrailblazerServiceSendPing(ctx echo.Context, params AitrailblazerServiceSendPingParams) error

	// (GET /v1/shelves/{shelf})
	AitrailblazerServiceGetShelf(ctx echo.Context, shelf int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AitrailblazerServiceSendPing converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceSendPing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceSendPingParams
	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceSendPing(ctx, params)
	return err
}

// AitrailblazerServiceGetShelf converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceGetShelf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shelf" -------------
	var shelf int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "shelf", runtime.ParamLocationPath, ctx.Param("shelf"), &shelf)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shelf: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceGetShelf(ctx, shelf)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/ping", wrapper.AitrailblazerServiceSendPing)
	router.GET(baseURL+"/v1/shelves/:shelf", wrapper.AitrailblazerServiceGetShelf)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTW/cNhP+KwPmPdiBIjnJix62CFDXCQyjhyzsXArbaLjkSJpEImVytO7G2P9eDKXN",
	"7nrlOof20JMokvP1zDMzfFDGt5136Diq2YOKpsZWp+W591WD8+DZL/ry1K1kU1tLTN7pZh58h4EJo5px",
	"6DFTFqMJ1Mmxmqkz71iTi6Ad6LAgDjqsIGIg3dA3tNBijLpC0I13FdwT16DhF151CFxrhkHdAiNwjZD2",
	"fZnWh0pylalux6EHlRTJYt+rTz+kapBVkQO5Sq3X33f84gsaVutMzclVlxg772Iys2+9866S7/8Clmqm",
	"XhRblIsR4mLun9Q9Su/rJGfxT1mUPrSa1UyR47dvtu6SY6wwiIYxFrn9KJZMBTRIS7Qf3Z4yqxlfMbV4",
	"GH+mlhgmdE35flVjUx7ifgpRDiBg9H0wEwkjOyXVO7rrcRQmK2K74f/0/8nwucYWp9Slg++5T0qPSjJy",
	"nkHnkcMqA2Rz/IMsuGLNfZym2efh8PPAN4slOYygofEVGd0AhuADtN5iMxCeIsSeWC8ahNIHsFSWGNAx",
	"dMFXQbctuQrQLSl41wqXMiBnmt7K/uWHq09wOr+QgrNwOT9LPzlcJMV9RAuLFVxXl/Oz26OauYuzoqiI",
	"636RG98WVejMcQ4ftKm3rm9q1GyKmeuACB2hwSg4Ws16NoZivMVsE9YgmCVnhi2LrKmJOfzuezDaQUnO",
	"gu8ZWh8Q9EKWXFPcQ0bka38P7OHeh69DnyAGcimH16fzC3iPkSoH5z1Z3MZmGt/bvEpdLEWoO4qFTXeL",
	"ZCIeH9JQgpjOZ0yYjFHe12RqiLXvGwsLlCaHrm9hqZs+Eex6NBw6k595i7cHG4+5/EQpj7BNsbmhyGJr",
	"BDsONDI6hFUC5xHu8KnGgMIGDca3rXcQcVdBYmpM3EtEYi+8ET+JsY3PNbTDgbEtGR2CXj3qTI/DsbjE",
	"RnLxqtQmUX2fSo8xJwcfXNVQrHM4dSvxdVp0R6bxZmz3QqwoxbVh0k5+BvrnI3K3f3MEJWFjM/BhR/Vi",
	"gN80hI5/qJPIFrnSH8Ly4oXkAj4uMSwJ70UZcSOypzJSqVk0+huGKzk2KHdVatdxED/JT/LXgrvv0OmO",
	"1Ey9zU/yt8J7zXXKabF8XXQ0jJwKWT6SBS0eXNgnLF2hszIDk6KgW2QMUc2uZU6pmbrrMaxUppyWRvw9",
	"69n4wJgaJrcymoaBmtx6c3IyFKRjdMkr3XUNmeRX8SV6t32wPDtrd6d1Qnsf5Y+/DaVW6r7hf8zqOB0m",
	"7L0fLI00DVvPMsW6EhwnQVe3ckPyJbNribF4SENsvZO6fUOhM3CO/Kv3X4/G7yXe9Rj5GAJyH1yEI9k9",
	"hocbBwA+ScLRSHndUS4N9RjejRcAKuQZ3CQ3HiS/77p+IVWIIRYvi4X3X2Pxcn2j0vX1z0+pbZFrb/+Q",
	"dqy5DygmbhJhbpQIrW8cXI4uaogdGirJQNLPMjFS6FJez7P1HHl4mByw9bDPX7zffyBsnizSDgNyIFwO",
	"PVEEpIi2NI+jjYB3PQW0m5fxli7PPl7+1TIYMPhv83975WED++TV9e36rwAAAP//V4lbZN0MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
