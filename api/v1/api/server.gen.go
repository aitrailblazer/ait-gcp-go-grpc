// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/aitrailblazer/ait-gcp-go-grpc/api/v1/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/ping)
	AitrailblazerServiceSendPing(ctx echo.Context, params AitrailblazerServiceSendPingParams) error

	// (GET /v1/shelves/{shelf})
	AitrailblazerServiceGetShelf(ctx echo.Context, shelf int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AitrailblazerServiceSendPing converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceSendPing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceSendPingParams
	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceSendPing(ctx, params)
	return err
}

// AitrailblazerServiceGetShelf converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceGetShelf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shelf" -------------
	var shelf int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "shelf", runtime.ParamLocationPath, ctx.Param("shelf"), &shelf)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shelf: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceGetShelf(ctx, shelf)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/ping", wrapper.AitrailblazerServiceSendPing)
	router.GET(baseURL+"/v1/shelves/:shelf", wrapper.AitrailblazerServiceGetShelf)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWzW7cNhB+lQHbgx0okpMUPWwRoK4TGEYPWdi5FLbRcMmRNIlEyuRo3Y2x714Mpc3u",
	"euU6h/bQkyiS8/fNNzN8UMa3nXfoOKrZg4qmxlan5bn3VYPz4Nkv+vLUrWRTW0tM3ulmHnyHgQmjmnHo",
	"MVMWownUybGaqTPvWJOLoB3osCAOOqwgYiDd0Fe00GKMukLQjXcV3BPXoOFXXnUIXGuGQd0CI3CNkPZ9",
	"mdaHSnKVqW7HoQeVFMli36uP36VqkFWRA7lKrdffdvziMxpW60zNyVWXGDvvYjKzb73zrpLvjwFLNVM/",
	"FFuUixHiYu6f1D1K7+skZ/EvWZQ+tJrVTJHjN6+37pJjrDCIhjEWuf0olkwFNEhLtB/cnjKrGV8ytXgY",
	"f6aWGCZ0Tfl+VWNTHuJ+ClEOIGD0fTATCSM7JdU7uutxFCYrYrvh//zTZPhcY4tT6tLBt9wnpUclGTnP",
	"oPPIYZUBsjn+ThZcseY+TtPs03D4aeCbxZIcRtDQ+IqMbgBD8AFab7EZCE8RYk+sFw1C6QNYKksM6Bi6",
	"4Kug25ZcBeiWFLxrhUsZkDNNb2X/8v3VRzidX0jBWbicn6WfHC6S4j6ihcUKrqvL+dntUc3cxVlRVMR1",
	"v8iNb4sqdOY4h/fa1FvXNzVqNsXMdUCEjtBgFBytZj0bQzHeYrYJaxDMkjPDlkXW1MQc/vA9GO2gJGfB",
	"9wytDwh6IUuuKe4hI/K1vwf2cO/Dl6FPEAO5lMPr0/kFvMNIlYPznixuYzON721epS6WItQdxcKmu0Uy",
	"EY8PaShBTOczJkzGKO9rMjXE2veNhQVKk0PXt7DUTZ8Idj0aDp3Jz7zF24ONx1x+opRH2KbY3FBksTWC",
	"HQcaGR3CKoHzCHf4WGNAYYMG49vWO4i4qyAxNSbuJSKxF96In8TYxuca2uHA2JaMDkGvHnWmx+FYXGIj",
	"uXhZapOovk+lx5iTg/euaijWOZy6lfg6Lboj03gztnshVpTi2jBpJz8D/fMRudt/OIKSsLEZ+LCjejHA",
	"bxpCx9/VSWSLXOlTkyVu5OxURiY1i0Z/xXCFYUkGJS8qteM4oHaSn+SvBFffodMdqZl6k5/kb4TXmuuU",
	"s2L5quhoGCkVsnwEZS3AX9gnLF2hszLjkqKgW2QMUc2uZQ6pmbrrMaxUppyWRvstq9n4gJgaFrcyeoaB",
	"mdx6fXIyFJxjdMkr3XUNmeRX8Tl6t32QPDtLd6dxQnOfXB9+H0qp1H3D/5rVsftP2Hs3WBppGLaeZYp1",
	"JThOgq5u5YbkS2bTEmPxkIbUeid1+4ZCZ+Ac+TfvvxyN30u86zHyMQTkPrgIR7J7DA83DgB8koSjkdK6",
	"o1wa5jG8HS8AVMgzuEluPEh+33b9QqoMQyxeFAvvv8TixfpGpevrX55S2yLX3v4p7VZzH1BM3CTC3CgR",
	"Wovg5eijhtihoZIMJAMsIyHFLvXzPF3PkYeXxwFdDxv5xbv9F8DmTSL9LiAHwuXQ9ERAqmjL8zjaCHjX",
	"U0C7efpu+fLs6+Q/rYMBg/93AWyvPGxgn7y6vl3/HQAA//+kQZbfvgwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
