// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/aitrailblazer/ait-gcp-go-grpc/api/v1/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /echo/{message})
	AitrailblazerServiceEcho(ctx echo.Context, message string, params AitrailblazerServiceEchoParams) error

	// (GET /listpets)
	AitrailblazerServiceListPets(ctx echo.Context, params AitrailblazerServiceListPetsParams) error

	// (GET /pets)
	AitrailblazerServiceFindPets(ctx echo.Context, params AitrailblazerServiceFindPetsParams) error

	// (POST /pets)
	AitrailblazerServiceAddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	AitrailblazerServiceDeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	AitrailblazerServiceFindPetByID(ctx echo.Context, id int64) error

	// (GET /v1/ping)
	AitrailblazerServiceSendPing(ctx echo.Context, params AitrailblazerServiceSendPingParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AitrailblazerServiceEcho converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceEcho(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "message" -------------
	var message string

	err = runtime.BindStyledParameterWithLocation("simple", false, "message", runtime.ParamLocationPath, ctx.Param("message"), &message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceEchoParams
	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, false, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceEcho(ctx, message, params)
	return err
}

// AitrailblazerServiceListPets converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceListPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceListPetsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageToken: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceListPets(ctx, params)
	return err
}

// AitrailblazerServiceFindPets converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceFindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceFindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceFindPets(ctx, params)
	return err
}

// AitrailblazerServiceAddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceAddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceAddPet(ctx)
	return err
}

// AitrailblazerServiceDeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceDeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceDeletePet(ctx, id)
	return err
}

// AitrailblazerServiceFindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceFindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceFindPetByID(ctx, id)
	return err
}

// AitrailblazerServiceSendPing converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceSendPing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceSendPingParams
	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceSendPing(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/echo/:message", wrapper.AitrailblazerServiceEcho)
	router.GET(baseURL+"/listpets", wrapper.AitrailblazerServiceListPets)
	router.GET(baseURL+"/pets", wrapper.AitrailblazerServiceFindPets)
	router.POST(baseURL+"/pets", wrapper.AitrailblazerServiceAddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.AitrailblazerServiceDeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.AitrailblazerServiceFindPetByID)
	router.GET(baseURL+"/v1/ping", wrapper.AitrailblazerServiceSendPing)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
