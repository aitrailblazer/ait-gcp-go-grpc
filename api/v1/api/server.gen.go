// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/aitrailblazer/ait-gcp-go-grpc/api/v1/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /echo/{message})
	AitrailblazerServiceEcho(ctx echo.Context, message string, params AitrailblazerServiceEchoParams) error

	// (GET /pets)
	AitrailblazerServiceFindPets(ctx echo.Context, params AitrailblazerServiceFindPetsParams) error

	// (POST /pets)
	AitrailblazerServiceAddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	AitrailblazerServiceDeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	AitrailblazerServiceFindPetByID(ctx echo.Context, id int64) error

	// (GET /v1/ping)
	AitrailblazerServiceSendPing(ctx echo.Context, params AitrailblazerServiceSendPingParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AitrailblazerServiceEcho converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceEcho(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "message" -------------
	var message string

	err = runtime.BindStyledParameterWithLocation("simple", false, "message", runtime.ParamLocationPath, ctx.Param("message"), &message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceEchoParams
	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, false, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceEcho(ctx, message, params)
	return err
}

// AitrailblazerServiceFindPets converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceFindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceFindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceFindPets(ctx, params)
	return err
}

// AitrailblazerServiceAddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceAddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceAddPet(ctx)
	return err
}

// AitrailblazerServiceDeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceDeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceDeletePet(ctx, id)
	return err
}

// AitrailblazerServiceFindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceFindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceFindPetByID(ctx, id)
	return err
}

// AitrailblazerServiceSendPing converts echo context to params.
func (w *ServerInterfaceWrapper) AitrailblazerServiceSendPing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AitrailblazerServiceSendPingParams
	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AitrailblazerServiceSendPing(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/echo/:message", wrapper.AitrailblazerServiceEcho)
	router.GET(baseURL+"/pets", wrapper.AitrailblazerServiceFindPets)
	router.POST(baseURL+"/pets", wrapper.AitrailblazerServiceAddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.AitrailblazerServiceDeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.AitrailblazerServiceFindPetByID)
	router.GET(baseURL+"/v1/ping", wrapper.AitrailblazerServiceSendPing)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
