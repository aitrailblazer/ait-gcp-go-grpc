// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/v1/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AitrailblazerServiceClient is the client API for AitrailblazerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AitrailblazerServiceClient interface {
	// /v1/ping or with optional message as query /v1/ping?message=test
	SendPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	// The FindPets RPC (Remote Procedure Call) allows
	// a client to search for pets based on certain
	// parameters. The parameters include tags
	// (such as breed, color, etc.) and a limit on the
	// number of pets to be returned. The RPC uses a
	// GET HTTP request to the "/pets" endpoint to
	// retrieve the desired pets. The result of the
	// RPC is a Pet message, which contains information
	// about the found pets.
	FindPets(ctx context.Context, in *FindPetsParameters, opts ...grpc.CallOption) (*Pet, error)
	// The AddPet RPC allows for the addition of a new
	// pet to the system. It takes in AddPetParameters
	// as input, which includes a NewPet message that
	// contains the name and tag of the new pet.
	// The RPC returns a Pet message, which likely
	// includes information about the newly added pet.
	// The RPC can be accessed via an HTTP POST request
	// to the "/pets" endpoint, with the new pet
	// information being sent in the body of the request.
	AddPet(ctx context.Context, in *AddPetParameters, opts ...grpc.CallOption) (*Pet, error)
	// This is a function signature for a Remote Procedure Call (RPC) in the Google API specification language. The function is called "FindPetByID" and it takes in a single input parameter called "FindPetByIDParameters". The function returns a single output of type "Pet".
	//
	// The "option" statement specifies additional options for the function, in this case specifying that the function can be called using an HTTP GET request to the URL "/pets/{id}", where "{id}" is a placeholder for a specific pet ID.
	//
	// This function allows a client to retrieve information about a specific pet by providing the pet's ID as a parameter in the HTTP request.
	//
	// Returns a pet by ID
	FindPetByID(ctx context.Context, in *FindPetByIDParameters, opts ...grpc.CallOption) (*Pet, error)
	// The DeletePet RPC (Remote Procedure Call) is used
	// to delete a pet from a database. It takes in a
	//
	//	DeletePetParameters message as input, which
	//
	// contains the ID of the pet to be deleted.
	// The RPC returns an Error message, which includes
	// a code and a message describing any errors that
	// may have occurred during the delete operation.
	// The RPC uses the HTTP DELETE method to delete
	// the pet from the database, with the ID of the
	// pet being specified in the URL as a path parameter.
	DeletePet(ctx context.Context, in *DeletePetParameters, opts ...grpc.CallOption) (*Error, error)
}

type aitrailblazerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAitrailblazerServiceClient(cc grpc.ClientConnInterface) AitrailblazerServiceClient {
	return &aitrailblazerServiceClient{cc}
}

func (c *aitrailblazerServiceClient) SendPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/aitrailblazer.service.v1.AitrailblazerService/SendPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aitrailblazerServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/aitrailblazer.service.v1.AitrailblazerService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aitrailblazerServiceClient) FindPets(ctx context.Context, in *FindPetsParameters, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/aitrailblazer.service.v1.AitrailblazerService/FindPets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aitrailblazerServiceClient) AddPet(ctx context.Context, in *AddPetParameters, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/aitrailblazer.service.v1.AitrailblazerService/AddPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aitrailblazerServiceClient) FindPetByID(ctx context.Context, in *FindPetByIDParameters, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/aitrailblazer.service.v1.AitrailblazerService/FindPetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aitrailblazerServiceClient) DeletePet(ctx context.Context, in *DeletePetParameters, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/aitrailblazer.service.v1.AitrailblazerService/DeletePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AitrailblazerServiceServer is the server API for AitrailblazerService service.
// All implementations must embed UnimplementedAitrailblazerServiceServer
// for forward compatibility
type AitrailblazerServiceServer interface {
	// /v1/ping or with optional message as query /v1/ping?message=test
	SendPing(context.Context, *PingRequest) (*PingResponse, error)
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	// The FindPets RPC (Remote Procedure Call) allows
	// a client to search for pets based on certain
	// parameters. The parameters include tags
	// (such as breed, color, etc.) and a limit on the
	// number of pets to be returned. The RPC uses a
	// GET HTTP request to the "/pets" endpoint to
	// retrieve the desired pets. The result of the
	// RPC is a Pet message, which contains information
	// about the found pets.
	FindPets(context.Context, *FindPetsParameters) (*Pet, error)
	// The AddPet RPC allows for the addition of a new
	// pet to the system. It takes in AddPetParameters
	// as input, which includes a NewPet message that
	// contains the name and tag of the new pet.
	// The RPC returns a Pet message, which likely
	// includes information about the newly added pet.
	// The RPC can be accessed via an HTTP POST request
	// to the "/pets" endpoint, with the new pet
	// information being sent in the body of the request.
	AddPet(context.Context, *AddPetParameters) (*Pet, error)
	// This is a function signature for a Remote Procedure Call (RPC) in the Google API specification language. The function is called "FindPetByID" and it takes in a single input parameter called "FindPetByIDParameters". The function returns a single output of type "Pet".
	//
	// The "option" statement specifies additional options for the function, in this case specifying that the function can be called using an HTTP GET request to the URL "/pets/{id}", where "{id}" is a placeholder for a specific pet ID.
	//
	// This function allows a client to retrieve information about a specific pet by providing the pet's ID as a parameter in the HTTP request.
	//
	// Returns a pet by ID
	FindPetByID(context.Context, *FindPetByIDParameters) (*Pet, error)
	// The DeletePet RPC (Remote Procedure Call) is used
	// to delete a pet from a database. It takes in a
	//
	//	DeletePetParameters message as input, which
	//
	// contains the ID of the pet to be deleted.
	// The RPC returns an Error message, which includes
	// a code and a message describing any errors that
	// may have occurred during the delete operation.
	// The RPC uses the HTTP DELETE method to delete
	// the pet from the database, with the ID of the
	// pet being specified in the URL as a path parameter.
	DeletePet(context.Context, *DeletePetParameters) (*Error, error)
	mustEmbedUnimplementedAitrailblazerServiceServer()
}

// UnimplementedAitrailblazerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAitrailblazerServiceServer struct {
}

func (UnimplementedAitrailblazerServiceServer) SendPing(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPing not implemented")
}
func (UnimplementedAitrailblazerServiceServer) Echo(context.Context, *EchoMessage) (*EchoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedAitrailblazerServiceServer) FindPets(context.Context, *FindPetsParameters) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPets not implemented")
}
func (UnimplementedAitrailblazerServiceServer) AddPet(context.Context, *AddPetParameters) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPet not implemented")
}
func (UnimplementedAitrailblazerServiceServer) FindPetByID(context.Context, *FindPetByIDParameters) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPetByID not implemented")
}
func (UnimplementedAitrailblazerServiceServer) DeletePet(context.Context, *DeletePetParameters) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}
func (UnimplementedAitrailblazerServiceServer) mustEmbedUnimplementedAitrailblazerServiceServer() {}

// UnsafeAitrailblazerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AitrailblazerServiceServer will
// result in compilation errors.
type UnsafeAitrailblazerServiceServer interface {
	mustEmbedUnimplementedAitrailblazerServiceServer()
}

func RegisterAitrailblazerServiceServer(s grpc.ServiceRegistrar, srv AitrailblazerServiceServer) {
	s.RegisterService(&AitrailblazerService_ServiceDesc, srv)
}

func _AitrailblazerService_SendPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AitrailblazerServiceServer).SendPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitrailblazer.service.v1.AitrailblazerService/SendPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AitrailblazerServiceServer).SendPing(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AitrailblazerService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AitrailblazerServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitrailblazer.service.v1.AitrailblazerService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AitrailblazerServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AitrailblazerService_FindPets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPetsParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AitrailblazerServiceServer).FindPets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitrailblazer.service.v1.AitrailblazerService/FindPets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AitrailblazerServiceServer).FindPets(ctx, req.(*FindPetsParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _AitrailblazerService_AddPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPetParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AitrailblazerServiceServer).AddPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitrailblazer.service.v1.AitrailblazerService/AddPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AitrailblazerServiceServer).AddPet(ctx, req.(*AddPetParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _AitrailblazerService_FindPetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPetByIDParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AitrailblazerServiceServer).FindPetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitrailblazer.service.v1.AitrailblazerService/FindPetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AitrailblazerServiceServer).FindPetByID(ctx, req.(*FindPetByIDParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _AitrailblazerService_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AitrailblazerServiceServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitrailblazer.service.v1.AitrailblazerService/DeletePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AitrailblazerServiceServer).DeletePet(ctx, req.(*DeletePetParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// AitrailblazerService_ServiceDesc is the grpc.ServiceDesc for AitrailblazerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AitrailblazerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aitrailblazer.service.v1.AitrailblazerService",
	HandlerType: (*AitrailblazerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPing",
			Handler:    _AitrailblazerService_SendPing_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _AitrailblazerService_Echo_Handler,
		},
		{
			MethodName: "FindPets",
			Handler:    _AitrailblazerService_FindPets_Handler,
		},
		{
			MethodName: "AddPet",
			Handler:    _AitrailblazerService_AddPet_Handler,
		},
		{
			MethodName: "FindPetByID",
			Handler:    _AitrailblazerService_FindPetByID_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _AitrailblazerService_DeletePet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service.proto",
}
